You respond to all questions in the following way-
<thinking>
In this section you understand the problem and develop a plan to solve the problem.

For easy problems-
Make a simple plan and use COMPONENTS
For moderate to hard problems-
1. Devise a step-by-step plan to solve the problem. (don't actually start solving yet, just make a plan)
2. Use Chain of Thought  reasoning to work through the plan and write the full solution within thinking.

When solving hard problems, you have to use <reflection> </reflection> tags whenever you write a step or solve a part that is complex and in the reflection tag you check the previous thing to do, if it is correct you continue, if it is incorrect you self correct and continue on the new correct path by mentioning the corrected plan or statement.
Always do reflection after making the plan to see if you missed something and also after you come to a conclusion use reflection to verify

</thinking>

<output>
In this section, provide the complete answer for the user based on your thinking process. Do not refer to the thinking tag. Include all relevant information and keep the response somewhat verbose, the user will not see what is in the thinking tag so make sure all user relevant info is in here. Do not refer to the thinking tag.
</output>

I have the following react components, please, IF AVAILABLE TIME SLOTS 
HAVE ALREADY PASSED/ ARE NOT UPCOMING ANYMORE,
DELETE THEM DIRECTLY FROM ADMIN AVAILABLE SLOTS So the date does not 
remain available on client side if it does not have an upcoming time
slot available. 
Here are the files:
File: pages/AdminDashboard.jsx
import React, { useState, useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { AuthContext } from '../context/AuthContext';
import AdminCalendar from './AdminCalendar';
import { format } from 'date-fns';
import CollapsibleAppointment from './CollapsibleAppointment';

const DashboardContainer = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;

  @media (min-width: 768px) {
    padding: 2rem;
  }
`;

const AppointmentList = styled.ul`
  list-style-type: none;
  padding: 0;
  display: grid;
  gap: 1rem;
  grid-template-columns: 1fr;

  @media (min-width: 768px) {
    grid-template-columns: repeat(2, 1fr);
  }

  @media (min-width: 1024px) {
    grid-template-columns: repeat(3, 1fr);
  }
`;

const AppointmentItem = styled.li`
  background-color: ${({ theme }) => theme.colors.cardBackground};
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
`;

const AppointmentDetails = styled.div`
  padding: 1rem;
`;

const Button = styled.button`
  background-color: ${({ theme }) => theme.colors.primary};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 0.5rem;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: ${({ theme }) => theme.colors.primaryDark};
  }
`;

const NoteContainer = styled.div`
  margin-top: 1rem;
`;

const NoteItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: ${({ theme }) => theme.colors.background};
  padding: 0.5rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
`;

const RemoveNoteButton = styled.button`
  background-color: ${({ theme }) => theme.colors.secondary};
  color: white;
  border: none;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: ${({ theme }) => theme.colors.secondaryDark};
  }
`;

const AvailabilityContainer = styled.div`
  margin-top: 2rem;
`;

const TimeSlotContainer = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
`;

const TimeInput = styled.input`
  margin-right: 0.5rem;
  padding: 0.5rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
`;

const TabContainer = styled.div`
  display: flex;
  margin-bottom: 1rem;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;

  @media (min-width: 768px) {
    justify-content: center;
  }
`;

const Tab = styled.button`
  background-color: ${({ active, theme }) => active ? theme.colors.primary : theme.colors.background};
  color: ${({ active, theme }) => active ? 'white' : theme.colors.text};
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 20px;
  cursor: pointer;
  margin-right: 0.5rem;
  transition: all 0.3s ease;
  white-space: nowrap;

  &:hover {
    background-color: ${({ theme }) => theme.colors.primaryLight};
    color: white;
  }
`;

const Header = styled.h1`
  text-align: center;
  margin-bottom: 2rem;
  font-size: 2.5rem;
  color: ${({ theme }) => theme.colors.primary};
`;

const SubHeader = styled.h2`
  text-align: center;
  margin-bottom: 1.5rem;
  font-size: 1.8rem;
  color: ${({ theme }) => theme.colors.secondary};
`;

function AdminDashboard() {
  const [appointments, setAppointments] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [availability, setAvailability] = useState({});
  const [newTimeSlot, setNewTimeSlot] = useState('');
  const [activeTab, setActiveTab] = useState('ALL');
  const { user, logout } = useContext(AuthContext);
  const navigate = useNavigate();

  useEffect(() => {
    if (!user || user.role !== 'admin') {
      navigate('/login');
    } else {
      const storedAppointments = JSON.parse(localStorage.getItem('appointments')) || [];
      setAppointments(storedAppointments);
      const storedAvailability = JSON.parse(localStorage.getItem('availability')) || {};
      setAvailability(storedAvailability);
    }
  }, [user, navigate]);

  const handleAddNote = (id, note) => {
    const updatedAppointments = appointments.map(appointment => 
      appointment.id === id ? { ...appointment, notes: [note, ...(appointment.notes || [])] } : appointment
    );
    setAppointments(updatedAppointments);
    localStorage.setItem('appointments', JSON.stringify(updatedAppointments));
  };

  const handleRemoveNote = (appointmentId, noteIndex) => {
    const updatedAppointments = appointments.map(appointment => {
      if (appointment.id === appointmentId) {
        const updatedNotes = appointment.notes.filter((_, index) => index !== noteIndex);
        return { ...appointment, notes: updatedNotes };
      }
      return appointment;
    });
    setAppointments(updatedAppointments);
    localStorage.setItem('appointments', JSON.stringify(updatedAppointments));
  };

  const handleCancel = (id) => {
    const appointmentToCancel = appointments.find(appointment => appointment.id === id);
    const updatedAppointments = appointments.filter(appointment => appointment.id !== id);
    setAppointments(updatedAppointments);
    localStorage.setItem('appointments', JSON.stringify(updatedAppointments));

    // Update availability
    const dateString = appointmentToCancel.date;
    const updatedAvailability = {
      ...availability,
      [dateString]: {
        ...availability[dateString],
        availableSlots: {
          ...availability[dateString]?.availableSlots,
          [appointmentToCancel.time]: true
        }
      }
    };
    setAvailability(updatedAvailability);
    localStorage.setItem('availability', JSON.stringify(updatedAvailability));
    window.dispatchEvent(new Event('storage'));
  };

  const handleComplete = (id, profit, materials) => {
    const updatedAppointments = appointments.map(appointment => 
      appointment.id === id ? { ...appointment, status: 'completed', profit, materials } : appointment
    );
    setAppointments(updatedAppointments);
    localStorage.setItem('appointments', JSON.stringify(updatedAppointments));
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const handleDaySelect = (date) => {
    setSelectedDate(date);
  };

  const handleAddTimeSlot = () => {
    if (selectedDate && newTimeSlot) {
      const dateString = format(selectedDate, 'yyyy-MM-dd');
      const updatedAvailability = {
        ...availability,
        [dateString]: {
          ...availability[dateString],
          isAvailable: true,
          availableSlots: {
            ...availability[dateString]?.availableSlots,
            [newTimeSlot]: true
          }
        }
      };
      setAvailability(updatedAvailability);
      localStorage.setItem('availability', JSON.stringify(updatedAvailability));
      setNewTimeSlot('');
      window.dispatchEvent(new Event('storage'));
    }
  };

  const handleRemoveTimeSlot = (time) => {
    if (selectedDate) {
      const dateString = format(selectedDate, 'yyyy-MM-dd');
      const updatedAvailability = {
        ...availability,
        [dateString]: {
          ...availability[dateString],
          availableSlots: {
            ...availability[dateString]?.availableSlots,
            [time]: false
          }
        }
      };
      setAvailability(updatedAvailability);
      localStorage.setItem('availability', JSON.stringify(updatedAvailability));
      window.dispatchEvent(new Event('storage'));
    }
  };

  const handleChangeTimeSlot = (oldTime, newTime) => {
    if (selectedDate) {
      const dateString = format(selectedDate, 'yyyy-MM-dd');
      const updatedAvailability = {
        ...availability,
        [dateString]: {
          ...availability[dateString],
          availableSlots: {
            ...availability[dateString]?.availableSlots,
            [oldTime]: false,
            [newTime]: true
          }
        }
      };
      setAvailability(updatedAvailability);
      localStorage.setItem('availability', JSON.stringify(updatedAvailability));
      window.dispatchEvent(new Event('storage'));
    }
  };

  const handleDownloadImage = (imageData) => {
    const link = document.createElement('a');
    link.href = imageData;
    link.download = 'inspiration_image.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleUpdateAppointmentName = (id, newName) => {
    const updatedAppointments = appointments.map(appointment => 
      appointment.id === id ? { ...appointment, clientName: newName } : appointment
    );
    setAppointments(updatedAppointments);
    localStorage.setItem('appointments', JSON.stringify(updatedAppointments));
  };

  const filteredAppointments = appointments.filter(appointment => {
    if (selectedDate) {
      return appointment.date === format(selectedDate, 'yyyy-MM-dd');
    }
    return true;
  }).sort((a, b) => {
    if (a.status === 'completed' && b.status !== 'completed') return 1;
    if (a.status !== 'completed' && b.status === 'completed') return -1;
    return new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time);
  });

  const displayedAppointments = filteredAppointments.filter(appointment => {
    if (activeTab === 'ALL') return true;
    if (activeTab === 'UPCOMING') return appointment.status !== 'completed';
    if (activeTab === 'COMPLETED') return appointment.status === 'completed';
    return true;
  });

  const todayAppointments = appointments.filter(appointment => {
    const today = new Date();
    return appointment.date === format(today, 'yyyy-MM-dd') && appointment.status !== 'completed';
  }).sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));

  return (
    <DashboardContainer>
      <Header>Admin Dashboard</Header>
      <Button onClick={handleLogout}>Logout</Button>
      <AdminCalendar appointments={appointments} onDaySelect={handleDaySelect} />
      
      <SubHeader>Today's Upcoming Appointments</SubHeader>
      <AppointmentList>
        {todayAppointments.map((appointment) => (
          <CollapsibleAppointment
            key={appointment.id}
            appointment={appointment}
            onAddNote={handleAddNote}
            onRemoveNote={handleRemoveNote}
            onCancel={handleCancel}
            onComplete={handleComplete}
            onDownloadImage={handleDownloadImage}
            onUpdateName={handleUpdateAppointmentName}
          />
        ))}
      </AppointmentList>

      {selectedDate && (
        <AvailabilityContainer>
          <SubHeader>Availability for {format(selectedDate, 'MMMM d, yyyy')}</SubHeader>
          <TimeSlotContainer>
            <TimeInput
              type="time"
              value={newTimeSlot}
              onChange={(e) => setNewTimeSlot(e.target.value)}
            />
            <Button onClick={handleAddTimeSlot}>Add Time Slot</Button>
          </TimeSlotContainer>
          {availability[format(selectedDate, 'yyyy-MM-dd')]?.availableSlots && 
            Object.entries(availability[format(selectedDate, 'yyyy-MM-dd')].availableSlots)
              .filter(([_, isAvailable]) => isAvailable)
              .map(([time, _]) => (
                <TimeSlotContainer key={time}>
                  <TimeInput
                    type="time"
                    value={time}
                    onChange={(e) => handleChangeTimeSlot(time, e.target.value)}
                  />
                  <Button onClick={() => handleRemoveTimeSlot(time)}>Remove</Button>
                </TimeSlotContainer>
              ))
          }
        </AvailabilityContainer>
      )}
      
      <SubHeader>All Appointments</SubHeader>
      <TabContainer>
        <Tab active={activeTab === 'ALL'} onClick={() => setActiveTab('ALL')}>ALL</Tab>
        <Tab active={activeTab === 'UPCOMING'} onClick={() => setActiveTab('UPCOMING')}>UPCOMING</Tab>
        <Tab active={activeTab === 'COMPLETED'} onClick={() => setActiveTab('COMPLETED')}>COMPLETED</Tab>
      </TabContainer>
      <AppointmentList>
        {displayedAppointments.map((appointment) => (
          <CollapsibleAppointment
            key={appointment.id}
            appointment={appointment}
            onAddNote={handleAddNote}
            onRemoveNote={handleRemoveNote}
            onCancel={handleCancel}
            onComplete={handleComplete}
            onDownloadImage={handleDownloadImage}
            onUpdateName={handleUpdateAppointmentName}
          />
        ))}
      </AppointmentList>
    </DashboardContainer>
  );
}

export default AdminDashboard;

File: pages/CollapsibleAppointment.jsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FaWhatsapp, FaEdit, FaCheck, FaTimes } from 'react-icons/fa';

const CollapsibleContainer = styled.div`
  background-color: ${({ theme }) => theme.colors.cardBackground};
  margin-bottom: 1rem;
  border-radius: 4px;
  overflow: hidden;
`;

const AppointmentHeader = styled.div`
  padding: 1rem;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ClientNameContainer = styled.div`
  display: flex;
  align-items: center;
`;

const ClientName = styled.strong`
  margin-right: 0.5rem;
`;

const EditButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  color: ${({ theme }) => theme.colors.primary};
  font-size: 1rem;
  padding: 0;
  margin-right: 0.5rem;
`;

const NameInput = styled.input`
  padding: 0.25rem;
  margin-right: 0.5rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
  font-size: 1rem;
`;

const ExpandButton = styled.button`
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
`;

const AppointmentDetails = styled(motion.div)`
  padding: 1rem;
  border-top: 1px solid ${({ theme }) => theme.colors.border};
`;

const Button = styled.button`
  background-color: ${({ theme }) => theme.colors.primary};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 0.5rem;
  margin-top: 0.5rem;
`;

const WhatsAppButton = styled(Button)`
  background-color: #25D366;
  display: flex;
  align-items: center;
`;

const NoteContainer = styled.div`
  margin-bottom: 1rem;
`;

const NoteItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: ${({ theme }) => theme.colors.background};
  padding: 0.5rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
`;

const RemoveNoteButton = styled.button`
  background-color: ${({ theme }) => theme.colors.secondary};
  color: white;
  border: none;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  cursor: pointer;
`;

const ImageContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 1rem;
`;

const InspirationImage = styled.img`
  max-width: 200px;
  max-height: 200px;
  margin-bottom: 0.5rem;
`;

const CollapsibleAppointment = ({ appointment, onAddNote, onRemoveNote, onCancel, onComplete, onDownloadImage, onUpdateName }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editableName, setEditableName] = useState(appointment.clientName);

  const getWhatsAppLink = (phone, message) => {
    return `https://wa.me/${phone}?text=${encodeURIComponent(message)}`;
  };

  const sendAppointmentMessage = () => {
    const appointmentDetails = `Appointment Details:\nDate: ${appointment.date}\nTime: ${appointment.time}\nClient: ${appointment.clientName}`;
    const appointmentLink = getWhatsAppLink(appointment.phone, appointmentDetails);
    window.open(appointmentLink, '_blank');
  };

  const handleNameChange = (e) => {
    setEditableName(e.target.value);
  };

  const handleNameUpdate = () => {
    onUpdateName(appointment.id, editableName);
    setIsEditing(false);
  };

  const handleCancelEdit = () => {
    setEditableName(appointment.clientName);
    setIsEditing(false);
  };

  const toggleExpand = (e) => {
    if (!isEditing) {
      setIsExpanded(!isExpanded);
    }
    e.stopPropagation();
  };

  return (
    <CollapsibleContainer>
      <AppointmentHeader onClick={toggleExpand}>
        <ClientNameContainer>
          {isEditing ? (
            <>
              <NameInput
                type="text"
                value={editableName}
                onChange={handleNameChange}
                onClick={(e) => e.stopPropagation()}
              />
              <EditButton onClick={handleNameUpdate}><FaCheck /></EditButton>
              <EditButton onClick={handleCancelEdit}><FaTimes /></EditButton>
            </>
          ) : (
            <>
              <ClientName>{appointment.clientName}</ClientName>
              <EditButton onClick={(e) => { e.stopPropagation(); setIsEditing(true); }}><FaEdit /></EditButton>
            </>
          )}
          - {appointment.date} {appointment.time}
        </ClientNameContainer>
        <ExpandButton>{isExpanded ? '▲' : '▼'}</ExpandButton>
      </AppointmentHeader>
      <AnimatePresence>
        {isExpanded && (
          <AppointmentDetails
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <p>Phone: {appointment.phone}</p>
            <p>Status: {appointment.status}</p>
            {appointment.status === 'completed' && (
              <>
                <p>Profit: {appointment.profit}</p>
                <p>Materials: {appointment.materials}</p>
              </>
            )}
            {appointment.image && (
              <ImageContainer>
                <p>Inspiration Image:</p>
                <InspirationImage src={appointment.image} alt="Inspiration" />
                <Button onClick={() => onDownloadImage(appointment.image)}>Download Image</Button>
              </ImageContainer>
            )}
            <NoteContainer>
              {appointment.notes && appointment.notes.map((note, index) => (
                <NoteItem key={index}>
                  <span>{note}</span>
                  <RemoveNoteButton onClick={() => onRemoveNote(appointment.id, index)}>Remove</RemoveNoteButton>
                </NoteItem>
              ))}
            </NoteContainer>
            <Button onClick={() => onAddNote(appointment.id, prompt('Enter note:'))}>Add Note</Button>
            <Button onClick={() => onCancel(appointment.id)}>Cancel</Button>
            {appointment.status !== 'completed' && (
              <Button onClick={() => {
                const profit = prompt('Enter profit:');
                const materials = prompt('Enter materials used:');
                onComplete(appointment.id, profit, materials);
              }}>Mark as Complete</Button>
            )}
            <WhatsAppButton onClick={sendAppointmentMessage}>
              <FaWhatsapp style={{ marginRight: '5px' }} />
              Send WhatsApp Message
            </WhatsAppButton>
          </AppointmentDetails>
        )}
      </AnimatePresence>
    </CollapsibleContainer>
  );
};

export default CollapsibleAppointment;

File: pages/clientscheduling.jsx
// src/pages/ClientScheduling.jsx
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence, LayoutGroup } from 'framer-motion';
import { format, addDays, isAfter, parseISO, startOfDay, isBefore } from 'date-fns';
import { FaCalendarAlt, FaClock, FaUser, FaImage } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';

const StepContainer = styled(motion.div)`
  background-color: ${({ theme }) => theme.colors.cardBackground};
  border-radius: 12px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
`;

const SchedulingContainer = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
`;

const Title = styled.h1`
  font-size: 2.5rem;
  margin-bottom: 2rem;
  text-align: center;
  color: ${({ theme }) => theme.colors.primary};
`;

const StepTitle = styled.h2`
  font-size: 1.5rem;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
`;

const StepIcon = styled.span`
  margin-right: 0.5rem;
  font-size: 1.2rem;
`;

const DateGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-top: 1rem;
  min-height: 150px;
  justify-content: center;
  align-items: center;
`;

const DateButton = styled(motion.button)`
  padding: 1rem;
  border: none;
  background-color: ${({ isSelected, theme }) => isSelected ? theme.colors.primary : theme.colors.secondary};
  color: white;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
`;

const TimeGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
`;

const TimeSlot = styled(motion.button)`
  padding: 0.5rem;
  border: none;
  background-color: ${({ isAvailable, isSelected, theme }) => 
    isSelected ? theme.colors.primary : 
    isAvailable ? theme.colors.secondary : 
    theme.colors.background};
  color: ${({ isAvailable, theme }) => isAvailable ? 'white' : theme.colors.text};
  border-radius: 8px;
  cursor: ${({ isAvailable }) => isAvailable ? 'pointer' : 'not-allowed'};
  opacity: ${({ isAvailable }) => isAvailable ? 1 : 0.5};
  font-weight: bold;
  transition: all 0.3s ease;

  &:hover {
    transform: ${({ isAvailable }) => isAvailable ? 'translateY(-2px)' : 'none'};
    box-shadow: ${({ isAvailable }) => isAvailable ? '0 4px 6px rgba(0, 0, 0, 0.1)' : 'none'};
  }
`;

const NoDatesMessage = styled.p`
  text-align: center;
  width: 100%;
  padding: 1rem;
  font-style: italic;
  color: ${({ theme }) => theme.colors.text};
`;

const Input = styled.input`
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 1rem;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 4px;
`;

const Button = styled.button`
  padding: 0.5rem 1rem;
  background-color: ${({ theme }) => theme.colors.primary};
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: ${({ theme }) => theme.colors.secondary};
  }
`;

const ImageUploadContainer = styled.div`
  margin-top: 1rem;
`;

const ImagePreview = styled.img`
  max-width: 100%;
  max-height: 200px;
  margin-top: 1rem;
`;

const ClientScheduling = () => {
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [image, setImage] = useState(null);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [availableDates, setAvailableDates] = useState([]);
  const [step, setStep] = useState('date');
  const navigate = useNavigate();

  const loadAvailability = () => {
    try {
      const availability = JSON.parse(localStorage.getItem('availability')) || {};
      const appointments = JSON.parse(localStorage.getItem('appointments')) || [];

      const today = startOfDay(new Date());
      const nextThirtyDays = Array.from({ length: 30 }, (_, i) => format(addDays(today, i), 'yyyy-MM-dd'));
      
      const availableDatesWithSlots = nextThirtyDays.filter(date => {
        const dateAvailability = availability[date] || { isAvailable: false, availableSlots: {} };
        const bookedSlots = appointments.filter(appointment => appointment.date === date).map(appointment => appointment.time);
        const availableSlots = Object.entries(dateAvailability.availableSlots)
          .filter(([slot, isAvailable]) => isAvailable && !bookedSlots.includes(slot));
        
        const isDateAvailable = dateAvailability.isAvailable && availableSlots.length > 0 && (parseISO(date) >= today || date === format(today, 'yyyy-MM-dd'));
        return isDateAvailable;
      });

      setAvailableDates(availableDatesWithSlots);

      if (selectedDate) {
        const dateAvailability = availability[selectedDate] || { isAvailable: false, availableSlots: {} };
        const bookedSlots = appointments
          .filter(appointment => appointment.date === selectedDate)
          .map(appointment => appointment.time);

        const currentTime = new Date();
        const slotsWithAvailability = Object.entries(dateAvailability.availableSlots)
          .filter(([_, isAvailable]) => isAvailable)
          .map(([slot, _]) => {
            const slotTime = parseISO(`${selectedDate}T${slot}`);
            return {
              time: slot,
              isAvailable: dateAvailability.isAvailable && !bookedSlots.includes(slot) && isAfter(slotTime, currentTime)
            };
          })
          .filter(slot => slot.isAvailable);

        setAvailableSlots(slotsWithAvailability);
      }
    } catch (error) {
      console.error('Error loading availability:', error);
    }
  };

  useEffect(() => {
    loadAvailability();

    const handleStorageChange = (e) => {
      if (e.key === 'availability' || e.key === 'appointments') {
        loadAvailability();
      }
    };

    window.addEventListener('storage', handleStorageChange);

    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [selectedDate]);

  const handleDateSelection = (date) => {
    setSelectedDate(date);
    setSelectedTime('');
    setStep('time');
  };

  const handleTimeSelection = (time) => {
    setSelectedTime(time);
    setStep('info');
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleConfirmAppointment = () => {
    if (!name || !phone) {
      alert('Please enter your name and phone number');
      return;
    }

    const appointments = JSON.parse(localStorage.getItem('appointments')) || [];
    const newAppointment = {
      id: Date.now(),
      date: selectedDate,
      time: selectedTime,
      clientName: name,
      phone: phone,
      status: 'scheduled',
      image: image
    };
    appointments.push(newAppointment);
    localStorage.setItem('appointments', JSON.stringify(appointments));
    
    const availability = JSON.parse(localStorage.getItem('availability')) || {};
    if (availability[selectedDate] && availability[selectedDate].availableSlots) {
      availability[selectedDate].availableSlots[selectedTime] = false;
      localStorage.setItem('availability', JSON.stringify(availability));
    }

    window.dispatchEvent(new Event('storage'));

    navigate(`/appointment-confirmation/${newAppointment.id}`);
  };

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
    exit: { opacity: 0, y: -20, transition: { duration: 0.5 } }
  };

  return (
    <SchedulingContainer>
      <Title>Schedule Your Nail Appointment</Title>
      <LayoutGroup>
        <AnimatePresence mode="wait">
          {step === 'date' && (
            <StepContainer
              key="date-selection"
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              layout
            >
              <StepTitle>
                <StepIcon><FaCalendarAlt /></StepIcon>
                Select a Date
              </StepTitle>
              <DateGrid>
                {availableDates.length > 0 ? (
                  availableDates.map((date) => (
                    <DateButton
                      key={date}
                      isSelected={date === selectedDate}
                      onClick={() => handleDateSelection(date)}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      layout
                    >
                      {format(parseISO(date), 'MMM d')}
                    </DateButton>
                  ))
                ) : (
                  <NoDatesMessage>No available dates. Please check back later.</NoDatesMessage>
                )}
              </DateGrid>
            </StepContainer>
          )}

          {step === 'time' && (
            <StepContainer
              key="time-selection"
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              layout
            >
              <StepTitle>
                <StepIcon><FaClock /></StepIcon>
                Select a Time
              </StepTitle>
              <TimeGrid>
                {availableSlots.map((slot, index) => (
                  <TimeSlot
                    key={index}
                    isAvailable={slot.isAvailable}
                    isSelected={selectedTime === slot.time}
                    onClick={() => slot.isAvailable && handleTimeSelection(slot.time)}
                    whileHover={{ scale: slot.isAvailable ? 1.05 : 1 }}
                    whileTap={{ scale: slot.isAvailable ? 0.95 : 1 }}
                    layout
                  >
                    {slot.time}
                  </TimeSlot>
                ))}
              </TimeGrid>
            </StepContainer>
          )}

          {step === 'info' && (
            <StepContainer
              key="info-collection"
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              layout
            >
              <StepTitle>
                <StepIcon><FaUser /></StepIcon>
                Your Information
              </StepTitle>
              <Input
                type="text"
                placeholder="Your Name"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
              <Input
                type="tel"
                placeholder="Your Phone Number"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
              />
              <ImageUploadContainer>
                <StepTitle>
                  <StepIcon><FaImage /></StepIcon>
                  Upload Design Inspiration (Optional)
                </StepTitle>
                <Input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                />
                {image && <ImagePreview src={image} alt="Design Inspiration" />}
              </ImageUploadContainer>
              <Button onClick={handleConfirmAppointment}>Confirm Appointment</Button>
            </StepContainer>
          )}
        </AnimatePresence>
      </LayoutGroup>
    </SchedulingContainer>
  );
};

export default ClientScheduling;

File: src/components/AdminCalendar.jsx
// AdminCalendar.jsx
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay } from 'date-fns';
import { FaChevronLeft, FaChevronRight } from 'react-icons/fa';

const CalendarContainer = styled.div`
  margin-bottom: 2rem;
  @media (max-width: 768px) {
    padding: 1rem;
  }
`;

const CalendarHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
`;

const MonthNavButton = styled.button`
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: ${({ theme }) => theme.colors.primary};
`;

const CalendarGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 1px;
  background-color: ${({ theme }) => theme.colors.secondary};
  @media (max-width: 768px) {
    font-size: 0.8rem;
  }
`;

const CalendarCell = styled.div`
  background-color: ${({ theme }) => theme.colors.cardBackground};
  padding: 1rem;
  text-align: center;
  position: relative;
  cursor: pointer;
  ${({ $isCurrentMonth, $isSelected, theme }) => `
    color: ${$isCurrentMonth ? theme.colors.text : theme.colors.secondary};
    ${$isSelected ? `
      background-color: ${theme.colors.primary};
      color: white;
    ` : ''}
  `}
  @media (max-width: 768px) {
    padding: 0.5rem;
  }
`;

const AppointmentCount = styled.div`
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: ${({ theme }) => theme.colors.primary};
  color: white;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
  @media (max-width: 768px) {
    width: 16px;
    height: 16px;
    font-size: 0.6rem;
    top: 2px;
    right: 2px;
  }
`;

const AvailabilityIndicator = styled.div`
  position: absolute;
  bottom: 5px;
  right: 5px;
  background-color: ${({ theme }) => theme.colors.secondary};
  color: white;
  border-radius: 4px;
  padding: 2px 4px;
  font-size: 0.7rem;
  @media (max-width: 768px) {
    font-size: 0.6rem;
    bottom: 2px;
    right: 2px;
  }
`;

const AdminCalendar = ({ appointments, onDaySelect }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(null);
  const [availability, setAvailability] = useState({});

  useEffect(() => {
    const handleStorageChange = () => {
      const updatedAvailability = JSON.parse(localStorage.getItem('availability')) || {};
      setAvailability(updatedAvailability);
    };

    window.addEventListener('storage', handleStorageChange);
    handleStorageChange(); // Initial load

    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(currentDate);
  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });

  const getAppointmentCount = (date) => {
    const dateString = format(date, 'yyyy-MM-dd');
    return appointments.filter(appointment => appointment.date === dateString).length;
  };

  const isDateAvailable = (date) => {
    const dateString = format(date, 'yyyy-MM-dd');
    const dateAvailability = availability[dateString];
    return dateAvailability && dateAvailability.isAvailable && Object.values(dateAvailability.availableSlots).some(slot => slot);
  };

  const handlePrevMonth = () => setCurrentDate(subMonths(currentDate, 1));
  const handleNextMonth = () => setCurrentDate(addMonths(currentDate, 1));

  const handleDayClick = (day) => {
    setSelectedDate(day);
    onDaySelect(day);
  };

  return (
    <CalendarContainer>
      <CalendarHeader>
        <MonthNavButton onClick={handlePrevMonth}><FaChevronLeft /></MonthNavButton>
        <h2>{format(currentDate, 'MMMM yyyy')}</h2>
        <MonthNavButton onClick={handleNextMonth}><FaChevronRight /></MonthNavButton>
      </CalendarHeader>
      <CalendarGrid>
        {daysInMonth.map((day, index) => {
          const appointmentCount = getAppointmentCount(day);
          const isAvailable = isDateAvailable(day);
          return (
            <CalendarCell
              key={index}
              $isCurrentMonth={isSameMonth(day, currentDate)}
              $isSelected={selectedDate && isSameDay(day, selectedDate)}
              onClick={() => handleDayClick(day)}
            >
              {format(day, 'd')}
              {appointmentCount > 0 && (
                <AppointmentCount>{appointmentCount}</AppointmentCount>
              )}
              {isAvailable && (
                <AvailabilityIndicator>Available</AvailabilityIndicator>
              )}
            </CalendarCell>
          );
        })}
      </CalendarGrid>
    </CalendarContainer>
  );
};

export default AdminCalendar;

Make sure You Will not remove any existing used features, it is imperative..
Fix it please and return fully updated file version ONLY as required. Ready to copy and paste.
Be careful with your response, your app response generation interface, it automatically formats it the same so it will cause errors.
No, as you are generating the code it gets changed again to wrong syntax.
As yourself suggested: The styled-components are now properly formatted with backticks (`) instead of parentheses, DO NOT ALLOW FORMATTING QHEN GENERATING STYLED COMPONENTS. 

You still doing the same, let me share with you a snippet where you have understood, DO NOT ALLOW FORMATTING WHEN GENERATING STYLED COMPONENTS : 

I understand the issues you've pointed out. I'll address each of them and provide the updated files with the necessary fixes. I'll make sure to use the correct syntax for styled-components with backticks. Here are the updated files:
File: components/ProjectShowcase.jsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { useParams, useNavigate } from 'react-router-dom';
import TaskManager from '../projects/TaskManager';
import Calculator from '../projects/Calculator';
import WeatherApp from '../projects/WeatherApp';
import { FaChevronLeft, FaChevronRight, FaCode } from 'react-icons/fa';
const ShowcaseContainer = styled(motion.div)  display: flex;   flex-direction: column;   align-items: center;   min-height: calc(100vh - 60px);   padding: 2rem;;
const ProjectView = styled(motion.div)  width: 100%;   max-width: 800px;   background-color: ${({ theme }) => theme.colors.cardBackground};   border-radius: 12px;   padding: 2rem;   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);;
const Title = styled(motion.h2)  font-size: 2rem;   margin-bottom: 2rem;   text-align: center;;
const NavigationArrow = styled(motion.button)  position: fixed;   top: 50%;   background: none;   border: none;   font-size: 2rem;   color: ${({ theme }) => theme.colors.primary};   cursor: pointer;   z-index: 10;   &.left {     left: 1rem;   }   &.right {     right: 1rem;   };
const CodeButton = styled(motion.button)  display: flex;   align-items: center;   justify-content: center;   padding: 0.5rem 1rem;   background-color: ${({ theme }) => theme.colors.primary};   color: white;   border: none;   border-radius: 4px;   cursor: pointer;   font-weight: bold;   margin-top: 1rem;;
const CodeIcon = styled(FaCode)  margin-right: 0.5rem;;
const CodeCurtain = styled(motion.div)  position: fixed;   top: 0;   left: 0;   right: 0;   bottom: 0;   background-color: ${({ theme }) => theme.colors.background};   z-index: 100;   display: flex;   flex-direction: column;   align-items: center;   justify-content: center;   padding: 2rem;   overflow-y: auto;;
const CodeContent = styled.pre  background-color: ${({ theme }) => theme.colors.cardBackground};   padding: 1rem;   border-radius: 8px;   width: 100%;   max-width: 800px;   overflow-x: auto;;
const CloseButton = styled(motion.button)`
position: absolute;
top: 1rem;
right: 1rem;
background: none;
border: none;
font-size: 1.5rem;
color CopyRetryEI understand the issues you've pointed out. I'll address each of them and provide the updated files with the necessary fixes. I'll make sure to use the correct syntax for styled-components with backticks. Here are the updated files:
