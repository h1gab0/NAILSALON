hero.jsx:

import React from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';

const HeroContainer = styled.section`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  text-align: center;
  background-image: ${({ theme }) => theme.isDark 
    ? 'linear-gradient(rgba(26, 26, 26, 0.7), rgba(26, 26, 26, 0.7)), url("/images/elegant-nails-bg-dark.jpg")'
    : 'linear-gradient(rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.7)), url("/images/elegant-nails-bg-light.jpg")'};
  background-size: cover;
  background-position: center;
  transition: all ${({ theme }) => theme.transitions.default};
  padding-top: 60px; // Add padding to account for the fixed header
`;

const Content = styled.div`
  position: relative;
  z-index: 1;
`;

const Title = styled(motion.h1)`
  font-size: 3.5rem;
  margin-bottom: 1rem;
  color: ${({ theme }) => theme.colors.text};
  font-family: ${({ theme }) => theme.fonts.heading};
  
  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {
    font-size: 2.5rem;
  }
`;

const Subtitle = styled(motion.p)`
  font-size: 1.5rem;
  margin-bottom: 2rem;
  color: ${({ theme }) => theme.colors.subtext};
  font-family: ${({ theme }) => theme.fonts.body};
  
  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {
    font-size: 1.2rem;
  }
`;

const CallToAction = styled(motion(Link))`
  padding: 0.75rem 1.5rem;
  background-color: ${({ theme }) => theme.colors.primary};
  color: ${({ theme }) => theme.isDark ? theme.colors.text : theme.colors.background};
  border-radius: 30px;
  text-decoration: none;
  font-weight: bold;
  transition: background-color 0.3s ease;
  font-family: ${({ theme }) => theme.fonts.body};

  &:hover {
    background-color: ${({ theme }) => theme.colors.secondary};
  }
`;

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.3,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 },
};

function Hero() {
  return (
    <HeroContainer as={motion.section} variants={containerVariants} initial="hidden" animate="visible">
      <Content>
        <Title variants={itemVariants}>
          Elegance at Your Fingertips
        </Title>
        <Subtitle variants={itemVariants}>
          Experience luxury nail care in the heart of the city
        </Subtitle>
        <CallToAction
          to="/book-appointment"
          variants={itemVariants}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          Book Your Appointment
        </CallToAction>
      </Content>
    </HeroContainer>
  );
}

export default Hero;
.......
NailTrendShowcase.jsx:  

import React from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FaPaintBrush, FaPalette } from 'react-icons/fa';

const ShowcaseContainer = styled(motion.section)`
  padding: 5rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: ${({ theme }) => theme.colors.background};
`;

const Title = styled(motion.h2)`
  font-size: 2.5rem;
  margin-bottom: 3rem;
  text-align: center;
  color: ${({ theme }) => theme.colors.text};
  font-family: ${({ theme }) => theme.fonts.heading};
`;

const TrendGrid = styled(motion.div)`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2.5rem;
  max-width: 1200px;
  width: 100%;
  padding: 0 2rem;
`;

const TrendCard = styled(motion.div)`
  background-color: ${({ theme }) => theme.colors.cardBackground};
  border-radius: ${({ theme }) => theme.radii.medium};
  padding: 2rem;
  box-shadow: ${({ theme }) => theme.shadows.medium};
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
`;

const TrendIcon = styled(motion.div)`
  font-size: 3.5rem;
  color: ${({ theme }) => theme.colors.primary};
  margin-bottom: 1.5rem;
`;

const TrendTitle = styled.h3`
  font-size: 1.75rem;
  margin-bottom: 1.5rem;
  color: ${({ theme }) => theme.colors.text};
  font-family: ${({ theme }) => theme.fonts.heading};
`;

const TrendDescription = styled.p`
  font-size: 1.125rem;
  margin-bottom: 1.5rem;
  color: ${({ theme }) => theme.colors.subtext};
  font-family: ${({ theme }) => theme.fonts.body};
`;

const TrendImage = styled.img`
  width: 100%;
  height: 250px;
  object-fit: cover;
  border-radius: ${({ theme }) => theme.radii.medium};
  margin-bottom: 1.5rem;
`;

const trends = [
  {
    id: 'minimalist-designs',
    title: 'Minimalist Designs',
    description: 'Clean lines and subtle patterns for a sophisticated look.',
    icon: FaPaintBrush,
    image: '/images/minimalist-nails.jpg',
  },
  {
    id: 'pastel-palette',
    title: 'Pastel Palette',
    description: 'Soft, dreamy colors perfect for any season.',
    icon: FaPalette,
    image: '/images/pastel-nails.jpg',
  },
];

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.3,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 30 },
  visible: { opacity: 1, y: 0 },
};

function NailTrendShowcase() {
  return (
    <ShowcaseContainer variants={containerVariants} initial="hidden" animate="visible">
      <Title variants={itemVariants}>Trending Nail Styles</Title>
      <TrendGrid variants={containerVariants}>
        {trends.map((trend) => (
          <TrendCard 
            key={trend.id} 
            variants={itemVariants} 
            whileHover={{ 
              scale: 1.03, 
              boxShadow: (theme) => theme.shadows.large,
              transition: { duration: 0.3 }
            }}
          >
            <TrendIcon 
              as={motion.div} 
              whileHover={{ rotate: 360, scale: 1.1 }} 
              transition={{ duration: 0.5 }}
            >
              <trend.icon />
            </TrendIcon>
            <TrendTitle>{trend.title}</TrendTitle>
            <TrendImage src={trend.image} alt={trend.title} />
            <TrendDescription>{trend.description}</TrendDescription>
          </TrendCard>
        ))}
      </TrendGrid>
    </ShowcaseContainer>
  );
}

export default NailTrendShowcase;
...........
GlobalStyles.JS:
import { createGlobalStyle } from 'styled-components';

const GlobalStyles = createGlobalStyle`
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    font-size: 16px;
    scroll-behavior: smooth;
    
    @media (max-width: ${({ theme }) => theme.breakpoints.md}) {
      font-size: 14px;
    }
  }

  body {
    font-family: ${({ theme }) => theme.fonts.body};
    line-height: 1.6;
    color: ${({ theme }) => theme.colors.text};
    background-color: ${({ theme }) => theme.colors.background};
    transition: all ${({ theme }) => theme.transitions.default};
  }

  a {
    color: ${({ theme }) => theme.colors.primary};
    text-decoration: none;
    transition: color ${({ theme }) => theme.transitions.default};

    &:hover {
      color: ${({ theme }) => theme.colors.secondary};
    }
  }

  img {
    max-width: 100%;
    height: auto;
  }
  
  #root {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: ${({ theme }) => theme.fonts.heading};
    margin-bottom: 1.5rem;
    line-height: 1.2;
    font-weight: 600;
  }

  p {
    margin-bottom: 1.5rem;
  }

  button {
    cursor: pointer;
    font-family: ${({ theme }) => theme.fonts.body};
    transition: all ${({ theme }) => theme.transitions.default};
    padding: 0.5rem 1rem;
    border: none;
    border-radius: ${({ theme }) => theme.radii.small};
    background-color: ${({ theme }) => theme.colors.primary};
    color: ${({ theme }) => theme.colors.background};

    &:hover {
      background-color: ${({ theme }) => theme.colors.secondary};
    }
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .section {
    padding: 5rem 0;

    @media (max-width: ${({ theme }) => theme.breakpoints.md}) {
      padding: 4rem 0;
    }
  }

  ::selection {
    background-color: ${({ theme }) => theme.colors.primary};
    color: ${({ theme }) => theme.colors.background};
  }

  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: ${({ theme }) => theme.colors.background};
  }

  ::-webkit-scrollbar-thumb {
    background: ${({ theme }) => theme.colors.primary};
    border-radius: ${({ theme }) => theme.radii.small};
  }

  ::-webkit-scrollbar-thumb:hover {
    background: ${({ theme }) => theme.colors.secondary};
  }
`;

export default GlobalStyles;
......
Theme.js:

const baseTheme = {
  fonts: {
    body: '"Inter", sans-serif',
    heading: '"Poppins", sans-serif',
  },
  breakpoints: {
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  },
  transitions: {
    default: '0.3s ease-in-out',
  },
  radii: {
    small: '4px',
    medium: '8px',
    large: '16px',
    round: '50%',
  },
  shadows: {
    small: '0 2px 4px rgba(0, 0, 0, 0.1)',
    medium: '0 4px 6px rgba(0, 0, 0, 0.1)',
    large: '0 10px 15px rgba(0, 0, 0, 0.1)',
  },
};

export const lightTheme = {
  ...baseTheme,
  colors: {
    primary: '#3498db',
    secondary: '#2ecc71',
    background: '#f8f9fa',
    cardBackground: '#ffffff',
    text: '#2c3e50',
    subtext: '#7f8c8d',
    headerBackground: '#ffffff',
    border: '#e0e0e0',
    hover: '#ecf0f1',
    success: '#27ae60',
    warning: '#f39c12',
    error: '#e74c3c',
  },
};

export const darkTheme = {
  ...baseTheme,
  colors: {
    primary: '#6c5ce7',
    secondary: '#00b894',
    background: '#2d3436',
    cardBackground: '#34495e',
    text: '#ecf0f1',
    subtext: '#bdc3c7',
    headerBackground: '#1e272e',
    border: '#4a4a4a',
    hover: '#3d3d3d',
    success: '#55efc4',
    warning: '#ffeaa7',
    error: '#ff7675',
  },
};
......
ThemeContext.jsx:
import React, { createContext, useState, useContext, useEffect } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(false);

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') setIsDarkMode(true);
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDarkMode;
    setIsDarkMode(newTheme);
    localStorage.setItem('theme', newTheme ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);
.........
themetoggle.jsx:
import React from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { useTheme } from '../context/ThemeContext';

// Update these styles in ThemeToggle.jsx

const ToggleContainer = styled(motion.button)`
  background: ${({ theme, isDark }) => isDark ? theme.colors.cardBackground : theme.colors.background};
  border: 2px solid ${({ theme }) => theme.colors.border};
  border-radius: ${({ theme }) => theme.radii.round};
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.25rem;
  width: 3.5rem;
  height: 2rem;
  transition: all ${({ theme }) => theme.transitions.default};
  overflow: hidden;

  @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {
    width: 3rem;
    height: 1.75rem;
  }
`;

const Icon = styled(motion.svg)`
  height: 1.25rem;
  width: 1.25rem;
  color: ${({ theme, isDark }) => isDark ? theme.colors.primary : theme.colors.secondary};
`;

// Use React.memo to prevent unnecessary re-renders
const ThemeToggle = React.memo(() => {
  const { isDarkMode, toggleTheme } = useTheme();

  // Update the variants
  const toggleVariants = {
    light: { backgroundColor: '#f8f9fa' },
    dark: { backgroundColor: '#34495e' },
  };

  const iconVariants = {
    light: { rotate: 0 },
    dark: { rotate: 360 },
  };

  const sunMoonVariants = {
    light: { scale: 1, opacity: 1 },
    dark: { scale: 0, opacity: 0 },
  };

  return (
    <ToggleContainer
      onClick={toggleTheme}
      animate={isDarkMode ? 'dark' : 'light'}
      variants={toggleVariants}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      aria-label={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}
    >
      <Icon
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        animate={isDarkMode ? 'dark' : 'light'}
        variants={iconVariants}
        transition={{ duration: 0.5 }}
      >
        <motion.circle cx="12" cy="12" r="5" variants={sunMoonVariants} />
        <motion.line x1="12" y1="1" x2="12" y2="3" variants={sunMoonVariants} />
        <motion.line x1="12" y1="21" x2="12" y2="23" variants={sunMoonVariants} />
        <motion.line x1="4.22" y1="4.22" x2="5.64" y2="5.64" variants={sunMoonVariants} />
        <motion.line x1="18.36" y1="18.36" x2="19.78" y2="19.78" variants={sunMoonVariants} />
        <motion.line x1="1" y1="12" x2="3" y2="12" variants={sunMoonVariants} />
        <motion.line x1="21" y1="12" x2="23" y2="12" variants={sunMoonVariants} />
        <motion.line x1="4.22" y1="19.78" x2="5.64" y2="18.36" variants={sunMoonVariants} />
        <motion.line x1="18.36" y1="5.64" x2="19.78" y2="4.22" variants={sunMoonVariants} />
      </Icon>
      <Icon
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        animate={isDarkMode ? 'dark' : 'light'}
        variants={iconVariants}
        transition={{ duration: 0.5 }}
      >
        <motion.path
          d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"
          variants={{
            light: { scale: 0, opacity: 0 },
            dark: { scale: 1, opacity: 1 },
          }}
        />
      </Icon>
    </ToggleContainer>
  );
});

export default ThemeToggle;

NAILTRENDSHOWCASE.JSX component is missaligned in Mobile phone mode, it's not fitting the HERO section size in Mobile 
phone mode.
Also, the layer for background image in Hero section has to be modified accordingly depending on the theme toggle status, dark layer for light mode and viceversa.
One more thing: if the content has to load in dark mode, DO NOT ALLOW pagr to show light mode and then instantly change to dark mode 
Fix it please and return fully merged files ONLY as required. Ready to copy and paste, make sure you are not OVERmodifying unnecessary information.

UNDO toSleep commit in Portfolio.