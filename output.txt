Trends Will redirect to tiktok chann.

I have following design components:

import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FaPaintBrush, FaPalette, FaGem, FaLeaf, FaMagic, FaChevronLeft, FaChevronRight } from 'react-icons/fa';

const ShowcaseContainer = styled.section`
  padding: 5rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: ${({ theme }) => theme.colors.background};
  overflow: hidden;
`;

const Title = styled.h2`
  font-size: 2.5rem;
  margin-bottom: 3rem;
  text-align: center;
  color: ${({ theme }) => theme.colors.text};
  font-family: ${({ theme }) => theme.fonts.heading};
`;

const CarouselWrapper = styled.div`
  position: relative;
  width: 100%;
  max-width: 800px;
  height: 500px;
  touch-action: pan-y;
`;

const TrendCard = styled(motion.div)`
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: ${({ theme }) => theme.colors.cardBackground};
  border-radius: ${({ theme }) => theme.radii.medium};
  padding: 2rem;
  box-shadow: ${({ theme }) => theme.shadows.medium};
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
`;

const TrendIcon = styled.div`
  font-size: 3.5rem;
  color: ${({ theme }) => theme.colors.primary};
  margin-bottom: 1.5rem;
`;

const TrendTitle = styled.h3`
  font-size: 1.75rem;
  margin-bottom: 1.5rem;
  color: ${({ theme }) => theme.colors.text};
  font-family: ${({ theme }) => theme.fonts.heading};
`;

const TrendDescription = styled.p`
  font-size: 1.125rem;
  margin-bottom: 1.5rem;
  color: ${({ theme }) => theme.colors.subtext};
  font-family: ${({ theme }) => theme.fonts.body};
`;

const StyledImage = styled.div`
  width: 100%;
  height: 250px;
  background-color: ${({ theme }) => theme.colors.primary};
  border-radius: ${({ theme }) => theme.radii.medium};
  margin-bottom: 1.5rem;
`;

const ArrowButton = styled.button`
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: background 0.3s;
  z-index: 10;

  &:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  &:focus {
    outline: none;
  }

  &.left {
    left: 10px;
  }

  &.right {
    right: 10px;
  }
`;

const IndicatorWrapper = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
`;

const Indicator = styled.div`
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: ${props => props.isActive ? props.theme.colors.primary : props.theme.colors.subtext};
  margin: 0 5px;
  transition: background 0.3s;
  cursor: pointer;
`;

const trends = [
  {
    id: 'minimalist-designs',
    title: 'Minimalist Designs',
    description: 'Clean lines and subtle patterns for a sophisticated look. Perfect for professional settings.',
    icon: FaPaintBrush,
  },
  {
    id: 'pastel-palette',
    title: 'Pastel Palette',
    description: 'Soft, dreamy colors perfect for any season. Great for weddings and special events.',
    icon: FaPalette,
  },
  {
    id: 'nail-art-techniques',
    title: 'Advanced Nail Art Techniques',
    description: 'Learn intricate designs to wow your clients and stand out in the industry.',
    icon: FaGem,
  },
  {
    id: 'eco-friendly-products',
    title: 'Eco-Friendly Nail Products',
    description: 'Sustainable and non-toxic options for environmentally conscious clients.',
    icon: FaLeaf,
  },
  {
    id: 'nail-health-tips',
    title: 'Nail Health & Maintenance',
    description: 'Advice on maintaining strong, healthy nails to share with your clients.',
    icon: FaMagic,
  },
];


function NailTrendShowcase() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [direction, setDirection] = useState(0);
  const [isAutoPlay, setIsAutoPlay] = useState(true);
  const touchStartX = useRef(null);
  const touchEndX = useRef(null);

  const nextSlide = useCallback(() => {
    setDirection(1);
    setCurrentIndex((prevIndex) => (prevIndex + 1) % trends.length);
  }, []);

  const prevSlide = useCallback(() => {
    setDirection(-1);
    setCurrentIndex((prevIndex) => (prevIndex - 1 + trends.length) % trends.length);
  }, []);

  useEffect(() => {
    let interval;
    if (isAutoPlay) {
      interval = setInterval(() => {
        nextSlide();
      }, 5000);
    }
    return () => clearInterval(interval);
  }, [isAutoPlay, nextSlide]);

  const handleManualInteraction = useCallback(() => {
    setIsAutoPlay(false);
    // Restart autoplay after 10 seconds of inactivity
    const timeout = setTimeout(() => setIsAutoPlay(true), 10000);
    return () => clearTimeout(timeout);
  }, []);

  const handleTouchStart = useCallback((e) => {
    touchStartX.current = e.touches[0].clientX;
    touchEndX.current = null;
    handleManualInteraction();
  }, [handleManualInteraction]);

  const handleTouchMove = useCallback((e) => {
    touchEndX.current = e.touches[0].clientX;
  }, []);

  const handleTouchEnd = useCallback(() => {
    if (!touchStartX.current || !touchEndX.current) return;
    const diff = touchStartX.current - touchEndX.current;
    const threshold = 50; // minimum distance to be considered a swipe

    if (diff > threshold) {
      nextSlide();
    } else if (diff < -threshold) {
      prevSlide();
    }

    touchStartX.current = null;
    touchEndX.current = null;
  }, [nextSlide, prevSlide]);

  const handleIndicatorClick = useCallback((index) => {
    setDirection(index > currentIndex ? 1 : -1);
    setCurrentIndex(index);
    handleManualInteraction();
  }, [currentIndex, handleManualInteraction]);

  const CurrentIcon = trends[currentIndex].icon;

  const variants = {
    enter: (direction) => ({
      x: direction > 0 ? 1000 : -1000,
      opacity: 0,
    }),
    center: {
      zIndex: 1,
      x: 0,
      opacity: 1,
    },
    exit: (direction) => ({
      zIndex: 0,
      x: direction < 0 ? 1000 : -1000,
      opacity: 0,
    }),
  };

  return (
    <ShowcaseContainer>
      <Title>Trending Nail Styles</Title>
      <CarouselWrapper
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <ArrowButton className="left" onClick={() => { prevSlide(); handleManualInteraction(); }}>
          <FaChevronLeft />
        </ArrowButton>
        <ArrowButton className="right" onClick={() => { nextSlide(); handleManualInteraction(); }}>
          <FaChevronRight />
        </ArrowButton>
        <AnimatePresence initial={false} custom={direction}>
          <TrendCard
            key={trends[currentIndex].id}
            custom={direction}
            variants={variants}
            initial="enter"
            animate="center"
            exit="exit"
            transition={{
              x: { type: "spring", stiffness: 300, damping: 30 },
              opacity: { duration: 0.2 },
            }}
          >
            <TrendIcon>
              <CurrentIcon />
            </TrendIcon>
            <TrendTitle>{trends[currentIndex].title}</TrendTitle>
            <StyledImage />
            <TrendDescription>{trends[currentIndex].description}</TrendDescription>
          </TrendCard>
        </AnimatePresence>
      </CarouselWrapper>
      <IndicatorWrapper>
        {trends.map((_, index) => (
          <Indicator
            key={index}
            isActive={index === currentIndex}
            onClick={() => handleIndicatorClick(index)}
          />
        ))}
      </IndicatorWrapper>
    </ShowcaseContainer>
  );
}

export default NailTrendShowcase;



Fix it please and return fully merged ONLY as required. Ready to copy and paste.
Be careful with your response, your app response generation interface, it automatically formats it the same so it will cause errors.
      No, as you are generating the code it gets changed again to wrong syntax.
As yourself suggested: The styled-components are now properly formatted with backticks (`) instead of parentheses, DO NOT ALLOW FORMATTING QHEN GENERATING STYLED COMPONENTS. 

You still doing the same, let me share with you a snippet where you have understood, DO NOT ALLOW FORMATTING WHEN GENERATING STYLED COMPONENTS : 

I understand the issues you've pointed out. I'll address each of them and provide the updated files with the necessary fixes. I'll make sure to use the correct syntax for styled-components with backticks. Here are the updated files:
File: components/ProjectShowcase.jsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { useParams, useNavigate } from 'react-router-dom';
import TaskManager from '../projects/TaskManager';
import Calculator from '../projects/Calculator';
import WeatherApp from '../projects/WeatherApp';
import { FaChevronLeft, FaChevronRight, FaCode } from 'react-icons/fa';
const ShowcaseContainer = styled(motion.div)  display: flex;   flex-direction: column;   align-items: center;   min-height: calc(100vh - 60px);   padding: 2rem;;
const ProjectView = styled(motion.div)  width: 100%;   max-width: 800px;   background-color: ${({ theme }) => theme.colors.cardBackground};   border-radius: 12px;   padding: 2rem;   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);;
const Title = styled(motion.h2)  font-size: 2rem;   margin-bottom: 2rem;   text-align: center;;
const NavigationArrow = styled(motion.button)  position: fixed;   top: 50%;   background: none;   border: none;   font-size: 2rem;   color: ${({ theme }) => theme.colors.primary};   cursor: pointer;   z-index: 10;   &.left {     left: 1rem;   }   &.right {     right: 1rem;   };
const CodeButton = styled(motion.button)  display: flex;   align-items: center;   justify-content: center;   padding: 0.5rem 1rem;   background-color: ${({ theme }) => theme.colors.primary};   color: white;   border: none;   border-radius: 4px;   cursor: pointer;   font-weight: bold;   margin-top: 1rem;;
const CodeIcon = styled(FaCode)  margin-right: 0.5rem;;
const CodeCurtain = styled(motion.div)  position: fixed;   top: 0;   left: 0;   right: 0;   bottom: 0;   background-color: ${({ theme }) => theme.colors.background};   z-index: 100;   display: flex;   flex-direction: column;   align-items: center;   justify-content: center;   padding: 2rem;   overflow-y: auto;;
const CodeContent = styled.pre  background-color: ${({ theme }) => theme.colors.cardBackground};   padding: 1rem;   border-radius: 8px;   width: 100%;   max-width: 800px;   overflow-x: auto;;
const CloseButton = styled(motion.button)`
position: absolute;
top: 1rem;
right: 1rem;
background: none;
border: none;
font-size: 1.5rem;
color CopyRetryEI understand the issues you've pointed out. I'll address each of them and provide the updated files with the necessary fixes. I'll make sure to use the correct syntax for styled-components with backticks. Here are the updated files:



IN MOBILE PHONE VIEW, DECREASE HERO TOP SPACING FROM NAVBAR.
When dark mode enabled and page reloaded, do not ALLOW flashing before setting dark mode.
Slideshow Is not bringing next item with right to left animation Even
when it goes to the right side item the new item animation comes from left
to right which Is at least anti-intuitive.

la aplicación muestra al cliente un calendario para seleccionar su fecha  
deseada cuando selecciona la fecha muestra un menú con las horas 
isponibles organizadas de más temprano a más tarde.

cuándo el cliente confirma la fecha y hora deseadas el sistema pide
ingresar tu nombre y número de teléfono y luego emite un  
número de cita el cual se refleja en el lado del administrador 
a través de un calendario en donde una pequeña burbuja en la fecha específica 
indica cuántas citas hay para el día al momento de abrir el ítem de fecha 
tú verás múltiples ítems de citas confirmadas por clientes las cuales 
puedes abrir para agregar alguna nota consultar la información,
cancelarla o finalizarla en dónde el sistema pedirá la ganancia de la cita y 
el material utilizad.
en caso de tener que cancelarla al número de teléfono se le va a enviar 
un mensaje de WhatsApp dejándole saber que la cita está cancelada junto
con el número de cita.

fuerte backend y database.